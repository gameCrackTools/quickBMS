#pragma once

#include <assert.h>
#include <math.h>

#ifndef max
#define max(a,b) ((a)>(b)?(a):(b))
#endif

#ifndef min
#define min(a,b) ((a)<(b)?(a):(b))
#endif

#define getulong(bptr) ( ((((unsigned char*)(bptr))[0])<<24) + (((unsigned char*)(bptr))[1]<<16) + (((unsigned char*)(bptr))[2]<<8) + (((unsigned char*)(bptr))[3]) )

static unsigned int ilog2round(unsigned int val)
{
unsigned int L;
	for(L=1; (1ul<<L) <= val; L++) ;
	L --;
	assert( val >= (1UL<<L) );
	val <<= (16 - L);
	assert( val >= 65536 && val < 65536*2 );
	if ( val >= 92682 ) // sqrt(2) * 1<<16
		L ++;
return L;
}

static int intlog2r(unsigned long N) // rounded 
{
 static unsigned char rbits[256] = {
	0,0,1,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,
	5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
	6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
	6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
	8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
	8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
	8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
	8,8,8,8,8
  };

	if ( N >> 16 ) {
		if ( N >> 24 ) {
			return (24 + rbits[N >> 24]);
		} else {
			return (16 + rbits[N >> 16]);
		}
	} else {
		if ( N >> 8 ) {
			return (8 + rbits[N >> 8]);
		} else {
			return rbits[N];
		}
	}
}

static unsigned char log2x16_table[256] = {	0,
	 0,16,25,32,37,41,45,48,51,53,55,57,59,61,63,64,
	65,67,68,69,70,71,72,73,74,75,76,77,78,79,79,80,
	81,81,82,83,83,84,85,85,86,86,87,87,88,88,89,89,
	90,90,91,91,92,92,93,93,93,94,94,95,95,95,96,96,
	96,97,97,97,98,98,98,99,99,99,100,100,100,101,101,101,
	101,102,102,102,103,103,103,103,104,104,104,104,105,105,105,105,
	106,106,106,106,107,107,107,107,107,108,108,108,108,109,109,109,
	109,109,110,110,110,110,110,111,111,111,111,111,111,112,112,112,
	112,112,113,113,113,113,113,113,114,114,114,114,114,114,115,115,
	115,115,115,115,116,116,116,116,116,116,116,117,117,117,117,117,
	117,117,118,118,118,118,118,118,118,119,119,119,119,119,119,119,
	119,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,
	121,122,122,122,122,122,122,122,122,123,123,123,123,123,123,123,
	123,123,124,124,124,124,124,124,124,124,124,125,125,125,125,125,
	125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,127,
	127,127,127,127,127,127,127,127,127,127,128,128,128,128,128	};

static unsigned int ilog2floor(unsigned int val)
{
	return static_cast<unsigned int>(log(static_cast<double>(val)));
}

static unsigned int ilog2x16(unsigned int val)
{
    unsigned int il,frac,lx16;

	if ( val <= 1 ) return 0;

	il = ilog2floor(val);

	assert( val >= (1UL << il) );

	frac = (val << 7) >> il;

	// val = 2^(il) * (frac/128)

	assert( frac >= 128 && frac < 256 );

	lx16 = il << 4;

	il = log2x16_table[ frac ] - 112;
	assert( il >= 0 && il <= 16 );

	lx16 += il;

    return lx16;
}
